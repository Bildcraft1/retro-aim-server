// Code generated by mockery v2.45.0. DO NOT EDIT.

package foodgroup

import (
	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"
)

// mockICQUserFinder is an autogenerated mock type for the ICQUserFinder type
type mockICQUserFinder struct {
	mock.Mock
}

type mockICQUserFinder_Expecter struct {
	mock *mock.Mock
}

func (_m *mockICQUserFinder) EXPECT() *mockICQUserFinder_Expecter {
	return &mockICQUserFinder_Expecter{mock: &_m.Mock}
}

// FindByDetails provides a mock function with given fields: firstName, lastName, nickName
func (_m *mockICQUserFinder) FindByDetails(firstName string, lastName string, nickName string) ([]state.User, error) {
	ret := _m.Called(firstName, lastName, nickName)

	if len(ret) == 0 {
		panic("no return value specified for FindByDetails")
	}

	var r0 []state.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]state.User, error)); ok {
		return rf(firstName, lastName, nickName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []state.User); ok {
		r0 = rf(firstName, lastName, nickName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]state.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(firstName, lastName, nickName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockICQUserFinder_FindByDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByDetails'
type mockICQUserFinder_FindByDetails_Call struct {
	*mock.Call
}

// FindByDetails is a helper method to define mock.On call
//   - firstName string
//   - lastName string
//   - nickName string
func (_e *mockICQUserFinder_Expecter) FindByDetails(firstName interface{}, lastName interface{}, nickName interface{}) *mockICQUserFinder_FindByDetails_Call {
	return &mockICQUserFinder_FindByDetails_Call{Call: _e.mock.On("FindByDetails", firstName, lastName, nickName)}
}

func (_c *mockICQUserFinder_FindByDetails_Call) Run(run func(firstName string, lastName string, nickName string)) *mockICQUserFinder_FindByDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockICQUserFinder_FindByDetails_Call) Return(_a0 []state.User, _a1 error) *mockICQUserFinder_FindByDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockICQUserFinder_FindByDetails_Call) RunAndReturn(run func(string, string, string) ([]state.User, error)) *mockICQUserFinder_FindByDetails_Call {
	_c.Call.Return(run)
	return _c
}

// FindByEmail provides a mock function with given fields: email
func (_m *mockICQUserFinder) FindByEmail(email string) (state.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 state.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (state.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) state.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(state.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockICQUserFinder_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type mockICQUserFinder_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - email string
func (_e *mockICQUserFinder_Expecter) FindByEmail(email interface{}) *mockICQUserFinder_FindByEmail_Call {
	return &mockICQUserFinder_FindByEmail_Call{Call: _e.mock.On("FindByEmail", email)}
}

func (_c *mockICQUserFinder_FindByEmail_Call) Run(run func(email string)) *mockICQUserFinder_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockICQUserFinder_FindByEmail_Call) Return(_a0 state.User, _a1 error) *mockICQUserFinder_FindByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockICQUserFinder_FindByEmail_Call) RunAndReturn(run func(string) (state.User, error)) *mockICQUserFinder_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindByInterests provides a mock function with given fields: code, keywords
func (_m *mockICQUserFinder) FindByInterests(code uint16, keywords []string) ([]state.User, error) {
	ret := _m.Called(code, keywords)

	if len(ret) == 0 {
		panic("no return value specified for FindByInterests")
	}

	var r0 []state.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint16, []string) ([]state.User, error)); ok {
		return rf(code, keywords)
	}
	if rf, ok := ret.Get(0).(func(uint16, []string) []state.User); ok {
		r0 = rf(code, keywords)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]state.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint16, []string) error); ok {
		r1 = rf(code, keywords)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockICQUserFinder_FindByInterests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByInterests'
type mockICQUserFinder_FindByInterests_Call struct {
	*mock.Call
}

// FindByInterests is a helper method to define mock.On call
//   - code uint16
//   - keywords []string
func (_e *mockICQUserFinder_Expecter) FindByInterests(code interface{}, keywords interface{}) *mockICQUserFinder_FindByInterests_Call {
	return &mockICQUserFinder_FindByInterests_Call{Call: _e.mock.On("FindByInterests", code, keywords)}
}

func (_c *mockICQUserFinder_FindByInterests_Call) Run(run func(code uint16, keywords []string)) *mockICQUserFinder_FindByInterests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint16), args[1].([]string))
	})
	return _c
}

func (_c *mockICQUserFinder_FindByInterests_Call) Return(_a0 []state.User, _a1 error) *mockICQUserFinder_FindByInterests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockICQUserFinder_FindByInterests_Call) RunAndReturn(run func(uint16, []string) ([]state.User, error)) *mockICQUserFinder_FindByInterests_Call {
	_c.Call.Return(run)
	return _c
}

// FindByKeyword provides a mock function with given fields: keyword
func (_m *mockICQUserFinder) FindByKeyword(keyword string) ([]state.User, error) {
	ret := _m.Called(keyword)

	if len(ret) == 0 {
		panic("no return value specified for FindByKeyword")
	}

	var r0 []state.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]state.User, error)); ok {
		return rf(keyword)
	}
	if rf, ok := ret.Get(0).(func(string) []state.User); ok {
		r0 = rf(keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]state.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockICQUserFinder_FindByKeyword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByKeyword'
type mockICQUserFinder_FindByKeyword_Call struct {
	*mock.Call
}

// FindByKeyword is a helper method to define mock.On call
//   - keyword string
func (_e *mockICQUserFinder_Expecter) FindByKeyword(keyword interface{}) *mockICQUserFinder_FindByKeyword_Call {
	return &mockICQUserFinder_FindByKeyword_Call{Call: _e.mock.On("FindByKeyword", keyword)}
}

func (_c *mockICQUserFinder_FindByKeyword_Call) Run(run func(keyword string)) *mockICQUserFinder_FindByKeyword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockICQUserFinder_FindByKeyword_Call) Return(_a0 []state.User, _a1 error) *mockICQUserFinder_FindByKeyword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockICQUserFinder_FindByKeyword_Call) RunAndReturn(run func(string) ([]state.User, error)) *mockICQUserFinder_FindByKeyword_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUIN provides a mock function with given fields: UIN
func (_m *mockICQUserFinder) FindByUIN(UIN uint32) (state.User, error) {
	ret := _m.Called(UIN)

	if len(ret) == 0 {
		panic("no return value specified for FindByUIN")
	}

	var r0 state.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32) (state.User, error)); ok {
		return rf(UIN)
	}
	if rf, ok := ret.Get(0).(func(uint32) state.User); ok {
		r0 = rf(UIN)
	} else {
		r0 = ret.Get(0).(state.User)
	}

	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(UIN)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockICQUserFinder_FindByUIN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUIN'
type mockICQUserFinder_FindByUIN_Call struct {
	*mock.Call
}

// FindByUIN is a helper method to define mock.On call
//   - UIN uint32
func (_e *mockICQUserFinder_Expecter) FindByUIN(UIN interface{}) *mockICQUserFinder_FindByUIN_Call {
	return &mockICQUserFinder_FindByUIN_Call{Call: _e.mock.On("FindByUIN", UIN)}
}

func (_c *mockICQUserFinder_FindByUIN_Call) Run(run func(UIN uint32)) *mockICQUserFinder_FindByUIN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *mockICQUserFinder_FindByUIN_Call) Return(_a0 state.User, _a1 error) *mockICQUserFinder_FindByUIN_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockICQUserFinder_FindByUIN_Call) RunAndReturn(run func(uint32) (state.User, error)) *mockICQUserFinder_FindByUIN_Call {
	_c.Call.Return(run)
	return _c
}

// newMockICQUserFinder creates a new instance of mockICQUserFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockICQUserFinder(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockICQUserFinder {
	mock := &mockICQUserFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
