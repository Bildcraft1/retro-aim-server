// Code generated by mockery v2.43.2. DO NOT EDIT.

package foodgroup

import (
	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"
)

// mockAccountManager is an autogenerated mock type for the AccountManager type
type mockAccountManager struct {
	mock.Mock
}

type mockAccountManager_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAccountManager) EXPECT() *mockAccountManager_Expecter {
	return &mockAccountManager_Expecter{mock: &_m.Mock}
}

// UpdateDisplayScreenName provides a mock function with given fields: displayScreenName
func (_m *mockAccountManager) UpdateDisplayScreenName(displayScreenName state.DisplayScreenName) error {
	ret := _m.Called(displayScreenName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDisplayScreenName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(state.DisplayScreenName) error); ok {
		r0 = rf(displayScreenName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAccountManager_UpdateDisplayScreenName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDisplayScreenName'
type mockAccountManager_UpdateDisplayScreenName_Call struct {
	*mock.Call
}

// UpdateDisplayScreenName is a helper method to define mock.On call
//   - displayScreenName state.DisplayScreenName
func (_e *mockAccountManager_Expecter) UpdateDisplayScreenName(displayScreenName interface{}) *mockAccountManager_UpdateDisplayScreenName_Call {
	return &mockAccountManager_UpdateDisplayScreenName_Call{Call: _e.mock.On("UpdateDisplayScreenName", displayScreenName)}
}

func (_c *mockAccountManager_UpdateDisplayScreenName_Call) Run(run func(displayScreenName state.DisplayScreenName)) *mockAccountManager_UpdateDisplayScreenName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(state.DisplayScreenName))
	})
	return _c
}

func (_c *mockAccountManager_UpdateDisplayScreenName_Call) Return(_a0 error) *mockAccountManager_UpdateDisplayScreenName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAccountManager_UpdateDisplayScreenName_Call) RunAndReturn(run func(state.DisplayScreenName) error) *mockAccountManager_UpdateDisplayScreenName_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAccountManager creates a new instance of mockAccountManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAccountManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAccountManager {
	mock := &mockAccountManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
