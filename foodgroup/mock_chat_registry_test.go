// Code generated by mockery v2.40.1. DO NOT EDIT.

package foodgroup

import (
	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"
)

// mockChatRegistry is an autogenerated mock type for the ChatRegistry type
type mockChatRegistry struct {
	mock.Mock
}

type mockChatRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *mockChatRegistry) EXPECT() *mockChatRegistry_Expecter {
	return &mockChatRegistry_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: room, sessionManager
func (_m *mockChatRegistry) Register(room state.ChatRoom, sessionManager interface{}) {
	_m.Called(room, sessionManager)
}

// mockChatRegistry_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type mockChatRegistry_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - room state.ChatRoom
//   - sessionManager interface{}
func (_e *mockChatRegistry_Expecter) Register(room interface{}, sessionManager interface{}) *mockChatRegistry_Register_Call {
	return &mockChatRegistry_Register_Call{Call: _e.mock.On("Register", room, sessionManager)}
}

func (_c *mockChatRegistry_Register_Call) Run(run func(room state.ChatRoom, sessionManager interface{})) *mockChatRegistry_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(state.ChatRoom), args[1].(interface{}))
	})
	return _c
}

func (_c *mockChatRegistry_Register_Call) Return() *mockChatRegistry_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockChatRegistry_Register_Call) RunAndReturn(run func(state.ChatRoom, interface{})) *mockChatRegistry_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: cookie
func (_m *mockChatRegistry) Remove(cookie string) {
	_m.Called(cookie)
}

// mockChatRegistry_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type mockChatRegistry_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - cookie string
func (_e *mockChatRegistry_Expecter) Remove(cookie interface{}) *mockChatRegistry_Remove_Call {
	return &mockChatRegistry_Remove_Call{Call: _e.mock.On("Remove", cookie)}
}

func (_c *mockChatRegistry_Remove_Call) Run(run func(cookie string)) *mockChatRegistry_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockChatRegistry_Remove_Call) Return() *mockChatRegistry_Remove_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockChatRegistry_Remove_Call) RunAndReturn(run func(string)) *mockChatRegistry_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Retrieve provides a mock function with given fields: cookie
func (_m *mockChatRegistry) Retrieve(cookie string) (state.ChatRoom, interface{}, error) {
	ret := _m.Called(cookie)

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 state.ChatRoom
	var r1 interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (state.ChatRoom, interface{}, error)); ok {
		return rf(cookie)
	}
	if rf, ok := ret.Get(0).(func(string) state.ChatRoom); ok {
		r0 = rf(cookie)
	} else {
		r0 = ret.Get(0).(state.ChatRoom)
	}

	if rf, ok := ret.Get(1).(func(string) interface{}); ok {
		r1 = rf(cookie)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(cookie)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockChatRegistry_Retrieve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retrieve'
type mockChatRegistry_Retrieve_Call struct {
	*mock.Call
}

// Retrieve is a helper method to define mock.On call
//   - cookie string
func (_e *mockChatRegistry_Expecter) Retrieve(cookie interface{}) *mockChatRegistry_Retrieve_Call {
	return &mockChatRegistry_Retrieve_Call{Call: _e.mock.On("Retrieve", cookie)}
}

func (_c *mockChatRegistry_Retrieve_Call) Run(run func(cookie string)) *mockChatRegistry_Retrieve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockChatRegistry_Retrieve_Call) Return(_a0 state.ChatRoom, _a1 interface{}, _a2 error) *mockChatRegistry_Retrieve_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *mockChatRegistry_Retrieve_Call) RunAndReturn(run func(string) (state.ChatRoom, interface{}, error)) *mockChatRegistry_Retrieve_Call {
	_c.Call.Return(run)
	return _c
}

// newMockChatRegistry creates a new instance of mockChatRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockChatRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockChatRegistry {
	mock := &mockChatRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
