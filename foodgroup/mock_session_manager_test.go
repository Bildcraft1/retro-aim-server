// Code generated by mockery v2.43.2. DO NOT EDIT.

package foodgroup

import (
	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"
)

// mockSessionManager is an autogenerated mock type for the SessionManager type
type mockSessionManager struct {
	mock.Mock
}

type mockSessionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSessionManager) EXPECT() *mockSessionManager_Expecter {
	return &mockSessionManager_Expecter{mock: &_m.Mock}
}

// AddSession provides a mock function with given fields: screenName
func (_m *mockSessionManager) AddSession(screenName state.DisplayScreenName) *state.Session {
	ret := _m.Called(screenName)

	if len(ret) == 0 {
		panic("no return value specified for AddSession")
	}

	var r0 *state.Session
	if rf, ok := ret.Get(0).(func(state.DisplayScreenName) *state.Session); ok {
		r0 = rf(screenName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Session)
		}
	}

	return r0
}

// mockSessionManager_AddSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSession'
type mockSessionManager_AddSession_Call struct {
	*mock.Call
}

// AddSession is a helper method to define mock.On call
//   - screenName state.DisplayScreenName
func (_e *mockSessionManager_Expecter) AddSession(screenName interface{}) *mockSessionManager_AddSession_Call {
	return &mockSessionManager_AddSession_Call{Call: _e.mock.On("AddSession", screenName)}
}

func (_c *mockSessionManager_AddSession_Call) Run(run func(screenName state.DisplayScreenName)) *mockSessionManager_AddSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(state.DisplayScreenName))
	})
	return _c
}

func (_c *mockSessionManager_AddSession_Call) Return(_a0 *state.Session) *mockSessionManager_AddSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSessionManager_AddSession_Call) RunAndReturn(run func(state.DisplayScreenName) *state.Session) *mockSessionManager_AddSession_Call {
	_c.Call.Return(run)
	return _c
}

// Empty provides a mock function with given fields:
func (_m *mockSessionManager) Empty() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Empty")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockSessionManager_Empty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Empty'
type mockSessionManager_Empty_Call struct {
	*mock.Call
}

// Empty is a helper method to define mock.On call
func (_e *mockSessionManager_Expecter) Empty() *mockSessionManager_Empty_Call {
	return &mockSessionManager_Empty_Call{Call: _e.mock.On("Empty")}
}

func (_c *mockSessionManager_Empty_Call) Run(run func()) *mockSessionManager_Empty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSessionManager_Empty_Call) Return(_a0 bool) *mockSessionManager_Empty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSessionManager_Empty_Call) RunAndReturn(run func() bool) *mockSessionManager_Empty_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveSession provides a mock function with given fields: sess
func (_m *mockSessionManager) RemoveSession(sess *state.Session) {
	_m.Called(sess)
}

// mockSessionManager_RemoveSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveSession'
type mockSessionManager_RemoveSession_Call struct {
	*mock.Call
}

// RemoveSession is a helper method to define mock.On call
//   - sess *state.Session
func (_e *mockSessionManager_Expecter) RemoveSession(sess interface{}) *mockSessionManager_RemoveSession_Call {
	return &mockSessionManager_RemoveSession_Call{Call: _e.mock.On("RemoveSession", sess)}
}

func (_c *mockSessionManager_RemoveSession_Call) Run(run func(sess *state.Session)) *mockSessionManager_RemoveSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*state.Session))
	})
	return _c
}

func (_c *mockSessionManager_RemoveSession_Call) Return() *mockSessionManager_RemoveSession_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockSessionManager_RemoveSession_Call) RunAndReturn(run func(*state.Session)) *mockSessionManager_RemoveSession_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveSession provides a mock function with given fields: screenName
func (_m *mockSessionManager) RetrieveSession(screenName state.IdentScreenName) *state.Session {
	ret := _m.Called(screenName)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveSession")
	}

	var r0 *state.Session
	if rf, ok := ret.Get(0).(func(state.IdentScreenName) *state.Session); ok {
		r0 = rf(screenName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Session)
		}
	}

	return r0
}

// mockSessionManager_RetrieveSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveSession'
type mockSessionManager_RetrieveSession_Call struct {
	*mock.Call
}

// RetrieveSession is a helper method to define mock.On call
//   - screenName state.IdentScreenName
func (_e *mockSessionManager_Expecter) RetrieveSession(screenName interface{}) *mockSessionManager_RetrieveSession_Call {
	return &mockSessionManager_RetrieveSession_Call{Call: _e.mock.On("RetrieveSession", screenName)}
}

func (_c *mockSessionManager_RetrieveSession_Call) Run(run func(screenName state.IdentScreenName)) *mockSessionManager_RetrieveSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(state.IdentScreenName))
	})
	return _c
}

func (_c *mockSessionManager_RetrieveSession_Call) Return(_a0 *state.Session) *mockSessionManager_RetrieveSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSessionManager_RetrieveSession_Call) RunAndReturn(run func(state.IdentScreenName) *state.Session) *mockSessionManager_RetrieveSession_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSessionManager creates a new instance of mockSessionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSessionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSessionManager {
	mock := &mockSessionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
