// Code generated by mockery v2.34.2. DO NOT EDIT.

package handler

import (
	context "context"

	oscar "github.com/mkaminski/goaim/oscar"
	mock "github.com/stretchr/testify/mock"

	state "github.com/mkaminski/goaim/state"
)

// mockSessionManager is an autogenerated mock type for the SessionManager type
type mockSessionManager struct {
	mock.Mock
}

type mockSessionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSessionManager) EXPECT() *mockSessionManager_Expecter {
	return &mockSessionManager_Expecter{mock: &_m.Mock}
}

// Broadcast provides a mock function with given fields: ctx, msg
func (_m *mockSessionManager) Broadcast(ctx context.Context, msg oscar.SNACMessage) {
	_m.Called(ctx, msg)
}

// mockSessionManager_Broadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Broadcast'
type mockSessionManager_Broadcast_Call struct {
	*mock.Call
}

// Broadcast is a helper method to define mock.On call
//   - ctx context.Context
//   - msg oscar.SNACMessage
func (_e *mockSessionManager_Expecter) Broadcast(ctx interface{}, msg interface{}) *mockSessionManager_Broadcast_Call {
	return &mockSessionManager_Broadcast_Call{Call: _e.mock.On("Broadcast", ctx, msg)}
}

func (_c *mockSessionManager_Broadcast_Call) Run(run func(ctx context.Context, msg oscar.SNACMessage)) *mockSessionManager_Broadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oscar.SNACMessage))
	})
	return _c
}

func (_c *mockSessionManager_Broadcast_Call) Return() *mockSessionManager_Broadcast_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockSessionManager_Broadcast_Call) RunAndReturn(run func(context.Context, oscar.SNACMessage)) *mockSessionManager_Broadcast_Call {
	_c.Call.Return(run)
	return _c
}

// BroadcastToScreenNames provides a mock function with given fields: ctx, screenNames, msg
func (_m *mockSessionManager) BroadcastToScreenNames(ctx context.Context, screenNames []string, msg oscar.SNACMessage) {
	_m.Called(ctx, screenNames, msg)
}

// mockSessionManager_BroadcastToScreenNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastToScreenNames'
type mockSessionManager_BroadcastToScreenNames_Call struct {
	*mock.Call
}

// BroadcastToScreenNames is a helper method to define mock.On call
//   - ctx context.Context
//   - screenNames []string
//   - msg oscar.SNACMessage
func (_e *mockSessionManager_Expecter) BroadcastToScreenNames(ctx interface{}, screenNames interface{}, msg interface{}) *mockSessionManager_BroadcastToScreenNames_Call {
	return &mockSessionManager_BroadcastToScreenNames_Call{Call: _e.mock.On("BroadcastToScreenNames", ctx, screenNames, msg)}
}

func (_c *mockSessionManager_BroadcastToScreenNames_Call) Run(run func(ctx context.Context, screenNames []string, msg oscar.SNACMessage)) *mockSessionManager_BroadcastToScreenNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(oscar.SNACMessage))
	})
	return _c
}

func (_c *mockSessionManager_BroadcastToScreenNames_Call) Return() *mockSessionManager_BroadcastToScreenNames_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockSessionManager_BroadcastToScreenNames_Call) RunAndReturn(run func(context.Context, []string, oscar.SNACMessage)) *mockSessionManager_BroadcastToScreenNames_Call {
	_c.Call.Return(run)
	return _c
}

// Empty provides a mock function with given fields:
func (_m *mockSessionManager) Empty() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockSessionManager_Empty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Empty'
type mockSessionManager_Empty_Call struct {
	*mock.Call
}

// Empty is a helper method to define mock.On call
func (_e *mockSessionManager_Expecter) Empty() *mockSessionManager_Empty_Call {
	return &mockSessionManager_Empty_Call{Call: _e.mock.On("Empty")}
}

func (_c *mockSessionManager_Empty_Call) Run(run func()) *mockSessionManager_Empty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSessionManager_Empty_Call) Return(_a0 bool) *mockSessionManager_Empty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSessionManager_Empty_Call) RunAndReturn(run func() bool) *mockSessionManager_Empty_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionWithSN provides a mock function with given fields: sessID, screenName
func (_m *mockSessionManager) NewSessionWithSN(sessID string, screenName string) *state.Session {
	ret := _m.Called(sessID, screenName)

	var r0 *state.Session
	if rf, ok := ret.Get(0).(func(string, string) *state.Session); ok {
		r0 = rf(sessID, screenName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Session)
		}
	}

	return r0
}

// mockSessionManager_NewSessionWithSN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewSessionWithSN'
type mockSessionManager_NewSessionWithSN_Call struct {
	*mock.Call
}

// NewSessionWithSN is a helper method to define mock.On call
//   - sessID string
//   - screenName string
func (_e *mockSessionManager_Expecter) NewSessionWithSN(sessID interface{}, screenName interface{}) *mockSessionManager_NewSessionWithSN_Call {
	return &mockSessionManager_NewSessionWithSN_Call{Call: _e.mock.On("NewSessionWithSN", sessID, screenName)}
}

func (_c *mockSessionManager_NewSessionWithSN_Call) Run(run func(sessID string, screenName string)) *mockSessionManager_NewSessionWithSN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockSessionManager_NewSessionWithSN_Call) Return(_a0 *state.Session) *mockSessionManager_NewSessionWithSN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSessionManager_NewSessionWithSN_Call) RunAndReturn(run func(string, string) *state.Session) *mockSessionManager_NewSessionWithSN_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: sess
func (_m *mockSessionManager) Remove(sess *state.Session) {
	_m.Called(sess)
}

// mockSessionManager_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type mockSessionManager_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - sess *state.Session
func (_e *mockSessionManager_Expecter) Remove(sess interface{}) *mockSessionManager_Remove_Call {
	return &mockSessionManager_Remove_Call{Call: _e.mock.On("Remove", sess)}
}

func (_c *mockSessionManager_Remove_Call) Run(run func(sess *state.Session)) *mockSessionManager_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*state.Session))
	})
	return _c
}

func (_c *mockSessionManager_Remove_Call) Return() *mockSessionManager_Remove_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockSessionManager_Remove_Call) RunAndReturn(run func(*state.Session)) *mockSessionManager_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Retrieve provides a mock function with given fields: ID
func (_m *mockSessionManager) Retrieve(ID string) (*state.Session, bool) {
	ret := _m.Called(ID)

	var r0 *state.Session
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (*state.Session, bool)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *state.Session); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// mockSessionManager_Retrieve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retrieve'
type mockSessionManager_Retrieve_Call struct {
	*mock.Call
}

// Retrieve is a helper method to define mock.On call
//   - ID string
func (_e *mockSessionManager_Expecter) Retrieve(ID interface{}) *mockSessionManager_Retrieve_Call {
	return &mockSessionManager_Retrieve_Call{Call: _e.mock.On("Retrieve", ID)}
}

func (_c *mockSessionManager_Retrieve_Call) Run(run func(ID string)) *mockSessionManager_Retrieve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockSessionManager_Retrieve_Call) Return(_a0 *state.Session, _a1 bool) *mockSessionManager_Retrieve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSessionManager_Retrieve_Call) RunAndReturn(run func(string) (*state.Session, bool)) *mockSessionManager_Retrieve_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveByScreenName provides a mock function with given fields: screenName
func (_m *mockSessionManager) RetrieveByScreenName(screenName string) *state.Session {
	ret := _m.Called(screenName)

	var r0 *state.Session
	if rf, ok := ret.Get(0).(func(string) *state.Session); ok {
		r0 = rf(screenName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Session)
		}
	}

	return r0
}

// mockSessionManager_RetrieveByScreenName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveByScreenName'
type mockSessionManager_RetrieveByScreenName_Call struct {
	*mock.Call
}

// RetrieveByScreenName is a helper method to define mock.On call
//   - screenName string
func (_e *mockSessionManager_Expecter) RetrieveByScreenName(screenName interface{}) *mockSessionManager_RetrieveByScreenName_Call {
	return &mockSessionManager_RetrieveByScreenName_Call{Call: _e.mock.On("RetrieveByScreenName", screenName)}
}

func (_c *mockSessionManager_RetrieveByScreenName_Call) Run(run func(screenName string)) *mockSessionManager_RetrieveByScreenName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockSessionManager_RetrieveByScreenName_Call) Return(_a0 *state.Session) *mockSessionManager_RetrieveByScreenName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSessionManager_RetrieveByScreenName_Call) RunAndReturn(run func(string) *state.Session) *mockSessionManager_RetrieveByScreenName_Call {
	_c.Call.Return(run)
	return _c
}

// SendToScreenName provides a mock function with given fields: ctx, screenName, msg
func (_m *mockSessionManager) SendToScreenName(ctx context.Context, screenName string, msg oscar.SNACMessage) {
	_m.Called(ctx, screenName, msg)
}

// mockSessionManager_SendToScreenName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendToScreenName'
type mockSessionManager_SendToScreenName_Call struct {
	*mock.Call
}

// SendToScreenName is a helper method to define mock.On call
//   - ctx context.Context
//   - screenName string
//   - msg oscar.SNACMessage
func (_e *mockSessionManager_Expecter) SendToScreenName(ctx interface{}, screenName interface{}, msg interface{}) *mockSessionManager_SendToScreenName_Call {
	return &mockSessionManager_SendToScreenName_Call{Call: _e.mock.On("SendToScreenName", ctx, screenName, msg)}
}

func (_c *mockSessionManager_SendToScreenName_Call) Run(run func(ctx context.Context, screenName string, msg oscar.SNACMessage)) *mockSessionManager_SendToScreenName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(oscar.SNACMessage))
	})
	return _c
}

func (_c *mockSessionManager_SendToScreenName_Call) Return() *mockSessionManager_SendToScreenName_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockSessionManager_SendToScreenName_Call) RunAndReturn(run func(context.Context, string, oscar.SNACMessage)) *mockSessionManager_SendToScreenName_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSessionManager creates a new instance of mockSessionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSessionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSessionManager {
	mock := &mockSessionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
