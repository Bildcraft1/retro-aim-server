// Code generated by mockery v2.35.2. DO NOT EDIT.

package handler

import (
	context "context"

	oscar "github.com/mkaminski/goaim/oscar"
	mock "github.com/stretchr/testify/mock"

	state "github.com/mkaminski/goaim/state"
)

// mockChatMessageRelayer is an autogenerated mock type for the ChatMessageRelayer type
type mockChatMessageRelayer struct {
	mock.Mock
}

type mockChatMessageRelayer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockChatMessageRelayer) EXPECT() *mockChatMessageRelayer_Expecter {
	return &mockChatMessageRelayer_Expecter{mock: &_m.Mock}
}

// BroadcastExcept provides a mock function with given fields: ctx, except, msg
func (_m *mockChatMessageRelayer) BroadcastExcept(ctx context.Context, except *state.Session, msg oscar.SNACMessage) {
	_m.Called(ctx, except, msg)
}

// mockChatMessageRelayer_BroadcastExcept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastExcept'
type mockChatMessageRelayer_BroadcastExcept_Call struct {
	*mock.Call
}

// BroadcastExcept is a helper method to define mock.On call
//   - ctx context.Context
//   - except *state.Session
//   - msg oscar.SNACMessage
func (_e *mockChatMessageRelayer_Expecter) BroadcastExcept(ctx interface{}, except interface{}, msg interface{}) *mockChatMessageRelayer_BroadcastExcept_Call {
	return &mockChatMessageRelayer_BroadcastExcept_Call{Call: _e.mock.On("BroadcastExcept", ctx, except, msg)}
}

func (_c *mockChatMessageRelayer_BroadcastExcept_Call) Run(run func(ctx context.Context, except *state.Session, msg oscar.SNACMessage)) *mockChatMessageRelayer_BroadcastExcept_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*state.Session), args[2].(oscar.SNACMessage))
	})
	return _c
}

func (_c *mockChatMessageRelayer_BroadcastExcept_Call) Return() *mockChatMessageRelayer_BroadcastExcept_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockChatMessageRelayer_BroadcastExcept_Call) RunAndReturn(run func(context.Context, *state.Session, oscar.SNACMessage)) *mockChatMessageRelayer_BroadcastExcept_Call {
	_c.Call.Return(run)
	return _c
}

// BroadcastToScreenNames provides a mock function with given fields: ctx, screenNames, msg
func (_m *mockChatMessageRelayer) BroadcastToScreenNames(ctx context.Context, screenNames []string, msg oscar.SNACMessage) {
	_m.Called(ctx, screenNames, msg)
}

// mockChatMessageRelayer_BroadcastToScreenNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastToScreenNames'
type mockChatMessageRelayer_BroadcastToScreenNames_Call struct {
	*mock.Call
}

// BroadcastToScreenNames is a helper method to define mock.On call
//   - ctx context.Context
//   - screenNames []string
//   - msg oscar.SNACMessage
func (_e *mockChatMessageRelayer_Expecter) BroadcastToScreenNames(ctx interface{}, screenNames interface{}, msg interface{}) *mockChatMessageRelayer_BroadcastToScreenNames_Call {
	return &mockChatMessageRelayer_BroadcastToScreenNames_Call{Call: _e.mock.On("BroadcastToScreenNames", ctx, screenNames, msg)}
}

func (_c *mockChatMessageRelayer_BroadcastToScreenNames_Call) Run(run func(ctx context.Context, screenNames []string, msg oscar.SNACMessage)) *mockChatMessageRelayer_BroadcastToScreenNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(oscar.SNACMessage))
	})
	return _c
}

func (_c *mockChatMessageRelayer_BroadcastToScreenNames_Call) Return() *mockChatMessageRelayer_BroadcastToScreenNames_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockChatMessageRelayer_BroadcastToScreenNames_Call) RunAndReturn(run func(context.Context, []string, oscar.SNACMessage)) *mockChatMessageRelayer_BroadcastToScreenNames_Call {
	_c.Call.Return(run)
	return _c
}

// Participants provides a mock function with given fields:
func (_m *mockChatMessageRelayer) Participants() []*state.Session {
	ret := _m.Called()

	var r0 []*state.Session
	if rf, ok := ret.Get(0).(func() []*state.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*state.Session)
		}
	}

	return r0
}

// mockChatMessageRelayer_Participants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Participants'
type mockChatMessageRelayer_Participants_Call struct {
	*mock.Call
}

// Participants is a helper method to define mock.On call
func (_e *mockChatMessageRelayer_Expecter) Participants() *mockChatMessageRelayer_Participants_Call {
	return &mockChatMessageRelayer_Participants_Call{Call: _e.mock.On("Participants")}
}

func (_c *mockChatMessageRelayer_Participants_Call) Run(run func()) *mockChatMessageRelayer_Participants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockChatMessageRelayer_Participants_Call) Return(_a0 []*state.Session) *mockChatMessageRelayer_Participants_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockChatMessageRelayer_Participants_Call) RunAndReturn(run func() []*state.Session) *mockChatMessageRelayer_Participants_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveByScreenName provides a mock function with given fields: screenName
func (_m *mockChatMessageRelayer) RetrieveByScreenName(screenName string) *state.Session {
	ret := _m.Called(screenName)

	var r0 *state.Session
	if rf, ok := ret.Get(0).(func(string) *state.Session); ok {
		r0 = rf(screenName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.Session)
		}
	}

	return r0
}

// mockChatMessageRelayer_RetrieveByScreenName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveByScreenName'
type mockChatMessageRelayer_RetrieveByScreenName_Call struct {
	*mock.Call
}

// RetrieveByScreenName is a helper method to define mock.On call
//   - screenName string
func (_e *mockChatMessageRelayer_Expecter) RetrieveByScreenName(screenName interface{}) *mockChatMessageRelayer_RetrieveByScreenName_Call {
	return &mockChatMessageRelayer_RetrieveByScreenName_Call{Call: _e.mock.On("RetrieveByScreenName", screenName)}
}

func (_c *mockChatMessageRelayer_RetrieveByScreenName_Call) Run(run func(screenName string)) *mockChatMessageRelayer_RetrieveByScreenName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockChatMessageRelayer_RetrieveByScreenName_Call) Return(_a0 *state.Session) *mockChatMessageRelayer_RetrieveByScreenName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockChatMessageRelayer_RetrieveByScreenName_Call) RunAndReturn(run func(string) *state.Session) *mockChatMessageRelayer_RetrieveByScreenName_Call {
	_c.Call.Return(run)
	return _c
}

// SendToScreenName provides a mock function with given fields: ctx, screenName, msg
func (_m *mockChatMessageRelayer) SendToScreenName(ctx context.Context, screenName string, msg oscar.SNACMessage) {
	_m.Called(ctx, screenName, msg)
}

// mockChatMessageRelayer_SendToScreenName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendToScreenName'
type mockChatMessageRelayer_SendToScreenName_Call struct {
	*mock.Call
}

// SendToScreenName is a helper method to define mock.On call
//   - ctx context.Context
//   - screenName string
//   - msg oscar.SNACMessage
func (_e *mockChatMessageRelayer_Expecter) SendToScreenName(ctx interface{}, screenName interface{}, msg interface{}) *mockChatMessageRelayer_SendToScreenName_Call {
	return &mockChatMessageRelayer_SendToScreenName_Call{Call: _e.mock.On("SendToScreenName", ctx, screenName, msg)}
}

func (_c *mockChatMessageRelayer_SendToScreenName_Call) Run(run func(ctx context.Context, screenName string, msg oscar.SNACMessage)) *mockChatMessageRelayer_SendToScreenName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(oscar.SNACMessage))
	})
	return _c
}

func (_c *mockChatMessageRelayer_SendToScreenName_Call) Return() *mockChatMessageRelayer_SendToScreenName_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockChatMessageRelayer_SendToScreenName_Call) RunAndReturn(run func(context.Context, string, oscar.SNACMessage)) *mockChatMessageRelayer_SendToScreenName_Call {
	_c.Call.Return(run)
	return _c
}

// newMockChatMessageRelayer creates a new instance of mockChatMessageRelayer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockChatMessageRelayer(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockChatMessageRelayer {
	mock := &mockChatMessageRelayer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
