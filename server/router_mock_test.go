// Code generated by mockery v2.38.0. DO NOT EDIT.

package server

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	oscar "github.com/mk6i/retro-aim-server/oscar"

	state "github.com/mk6i/retro-aim-server/state"
)

// mockRouter is an autogenerated mock type for the Router type
type mockRouter struct {
	mock.Mock
}

type mockRouter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockRouter) EXPECT() *mockRouter_Expecter {
	return &mockRouter_Expecter{mock: &_m.Mock}
}

// Route provides a mock function with given fields: ctx, sess, inFrame, r, w, sequence
func (_m *mockRouter) Route(ctx context.Context, sess *state.Session, inFrame oscar.SNACFrame, r io.Reader, w io.Writer, sequence *uint32) error {
	ret := _m.Called(ctx, sess, inFrame, r, w, sequence)

	if len(ret) == 0 {
		panic("no return value specified for Route")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *state.Session, oscar.SNACFrame, io.Reader, io.Writer, *uint32) error); ok {
		r0 = rf(ctx, sess, inFrame, r, w, sequence)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockRouter_Route_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Route'
type mockRouter_Route_Call struct {
	*mock.Call
}

// Route is a helper method to define mock.On call
//   - ctx context.Context
//   - sess *state.Session
//   - inFrame oscar.SNACFrame
//   - r io.Reader
//   - w io.Writer
//   - sequence *uint32
func (_e *mockRouter_Expecter) Route(ctx interface{}, sess interface{}, inFrame interface{}, r interface{}, w interface{}, sequence interface{}) *mockRouter_Route_Call {
	return &mockRouter_Route_Call{Call: _e.mock.On("Route", ctx, sess, inFrame, r, w, sequence)}
}

func (_c *mockRouter_Route_Call) Run(run func(ctx context.Context, sess *state.Session, inFrame oscar.SNACFrame, r io.Reader, w io.Writer, sequence *uint32)) *mockRouter_Route_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*state.Session), args[2].(oscar.SNACFrame), args[3].(io.Reader), args[4].(io.Writer), args[5].(*uint32))
	})
	return _c
}

func (_c *mockRouter_Route_Call) Return(_a0 error) *mockRouter_Route_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRouter_Route_Call) RunAndReturn(run func(context.Context, *state.Session, oscar.SNACFrame, io.Reader, io.Writer, *uint32) error) *mockRouter_Route_Call {
	_c.Call.Return(run)
	return _c
}

// newMockRouter creates a new instance of mockRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRouter {
	mock := &mockRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
