// Code generated by mockery v2.35.2. DO NOT EDIT.

package server

import (
	context "context"

	oscar "github.com/mkaminski/goaim/oscar"
	mock "github.com/stretchr/testify/mock"

	user "github.com/mkaminski/goaim/user"
)

// MockChatNavHandler is an autogenerated mock type for the ChatNavHandler type
type MockChatNavHandler struct {
	mock.Mock
}

type MockChatNavHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChatNavHandler) EXPECT() *MockChatNavHandler_Expecter {
	return &MockChatNavHandler_Expecter{mock: &_m.Mock}
}

// CreateRoomHandler provides a mock function with given fields: ctx, sess, newRoom, newChatSessMgr, snacPayloadIn
func (_m *MockChatNavHandler) CreateRoomHandler(ctx context.Context, sess *user.Session, newRoom func() ChatRoom, newChatSessMgr func() ChatSessionManager, snacPayloadIn oscar.SNAC_0x0E_0x02_ChatRoomInfoUpdate) (oscar.XMessage, error) {
	ret := _m.Called(ctx, sess, newRoom, newChatSessMgr, snacPayloadIn)

	var r0 oscar.XMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.Session, func() ChatRoom, func() ChatSessionManager, oscar.SNAC_0x0E_0x02_ChatRoomInfoUpdate) (oscar.XMessage, error)); ok {
		return rf(ctx, sess, newRoom, newChatSessMgr, snacPayloadIn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.Session, func() ChatRoom, func() ChatSessionManager, oscar.SNAC_0x0E_0x02_ChatRoomInfoUpdate) oscar.XMessage); ok {
		r0 = rf(ctx, sess, newRoom, newChatSessMgr, snacPayloadIn)
	} else {
		r0 = ret.Get(0).(oscar.XMessage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.Session, func() ChatRoom, func() ChatSessionManager, oscar.SNAC_0x0E_0x02_ChatRoomInfoUpdate) error); ok {
		r1 = rf(ctx, sess, newRoom, newChatSessMgr, snacPayloadIn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChatNavHandler_CreateRoomHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoomHandler'
type MockChatNavHandler_CreateRoomHandler_Call struct {
	*mock.Call
}

// CreateRoomHandler is a helper method to define mock.On call
//   - ctx context.Context
//   - sess *user.Session
//   - newRoom func() ChatRoom
//   - newChatSessMgr func() ChatSessionManager
//   - snacPayloadIn oscar.SNAC_0x0E_0x02_ChatRoomInfoUpdate
func (_e *MockChatNavHandler_Expecter) CreateRoomHandler(ctx interface{}, sess interface{}, newRoom interface{}, newChatSessMgr interface{}, snacPayloadIn interface{}) *MockChatNavHandler_CreateRoomHandler_Call {
	return &MockChatNavHandler_CreateRoomHandler_Call{Call: _e.mock.On("CreateRoomHandler", ctx, sess, newRoom, newChatSessMgr, snacPayloadIn)}
}

func (_c *MockChatNavHandler_CreateRoomHandler_Call) Run(run func(ctx context.Context, sess *user.Session, newRoom func() ChatRoom, newChatSessMgr func() ChatSessionManager, snacPayloadIn oscar.SNAC_0x0E_0x02_ChatRoomInfoUpdate)) *MockChatNavHandler_CreateRoomHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user.Session), args[2].(func() ChatRoom), args[3].(func() ChatSessionManager), args[4].(oscar.SNAC_0x0E_0x02_ChatRoomInfoUpdate))
	})
	return _c
}

func (_c *MockChatNavHandler_CreateRoomHandler_Call) Return(_a0 oscar.XMessage, _a1 error) *MockChatNavHandler_CreateRoomHandler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChatNavHandler_CreateRoomHandler_Call) RunAndReturn(run func(context.Context, *user.Session, func() ChatRoom, func() ChatSessionManager, oscar.SNAC_0x0E_0x02_ChatRoomInfoUpdate) (oscar.XMessage, error)) *MockChatNavHandler_CreateRoomHandler_Call {
	_c.Call.Return(run)
	return _c
}

// RequestChatRightsHandler provides a mock function with given fields: ctx
func (_m *MockChatNavHandler) RequestChatRightsHandler(ctx context.Context) oscar.XMessage {
	ret := _m.Called(ctx)

	var r0 oscar.XMessage
	if rf, ok := ret.Get(0).(func(context.Context) oscar.XMessage); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(oscar.XMessage)
	}

	return r0
}

// MockChatNavHandler_RequestChatRightsHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestChatRightsHandler'
type MockChatNavHandler_RequestChatRightsHandler_Call struct {
	*mock.Call
}

// RequestChatRightsHandler is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockChatNavHandler_Expecter) RequestChatRightsHandler(ctx interface{}) *MockChatNavHandler_RequestChatRightsHandler_Call {
	return &MockChatNavHandler_RequestChatRightsHandler_Call{Call: _e.mock.On("RequestChatRightsHandler", ctx)}
}

func (_c *MockChatNavHandler_RequestChatRightsHandler_Call) Run(run func(ctx context.Context)) *MockChatNavHandler_RequestChatRightsHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockChatNavHandler_RequestChatRightsHandler_Call) Return(_a0 oscar.XMessage) *MockChatNavHandler_RequestChatRightsHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChatNavHandler_RequestChatRightsHandler_Call) RunAndReturn(run func(context.Context) oscar.XMessage) *MockChatNavHandler_RequestChatRightsHandler_Call {
	_c.Call.Return(run)
	return _c
}

// RequestRoomInfoHandler provides a mock function with given fields: ctx, snacPayloadIn
func (_m *MockChatNavHandler) RequestRoomInfoHandler(ctx context.Context, snacPayloadIn oscar.SNAC_0x0D_0x04_ChatNavRequestRoomInfo) (oscar.XMessage, error) {
	ret := _m.Called(ctx, snacPayloadIn)

	var r0 oscar.XMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oscar.SNAC_0x0D_0x04_ChatNavRequestRoomInfo) (oscar.XMessage, error)); ok {
		return rf(ctx, snacPayloadIn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oscar.SNAC_0x0D_0x04_ChatNavRequestRoomInfo) oscar.XMessage); ok {
		r0 = rf(ctx, snacPayloadIn)
	} else {
		r0 = ret.Get(0).(oscar.XMessage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, oscar.SNAC_0x0D_0x04_ChatNavRequestRoomInfo) error); ok {
		r1 = rf(ctx, snacPayloadIn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChatNavHandler_RequestRoomInfoHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestRoomInfoHandler'
type MockChatNavHandler_RequestRoomInfoHandler_Call struct {
	*mock.Call
}

// RequestRoomInfoHandler is a helper method to define mock.On call
//   - ctx context.Context
//   - snacPayloadIn oscar.SNAC_0x0D_0x04_ChatNavRequestRoomInfo
func (_e *MockChatNavHandler_Expecter) RequestRoomInfoHandler(ctx interface{}, snacPayloadIn interface{}) *MockChatNavHandler_RequestRoomInfoHandler_Call {
	return &MockChatNavHandler_RequestRoomInfoHandler_Call{Call: _e.mock.On("RequestRoomInfoHandler", ctx, snacPayloadIn)}
}

func (_c *MockChatNavHandler_RequestRoomInfoHandler_Call) Run(run func(ctx context.Context, snacPayloadIn oscar.SNAC_0x0D_0x04_ChatNavRequestRoomInfo)) *MockChatNavHandler_RequestRoomInfoHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(oscar.SNAC_0x0D_0x04_ChatNavRequestRoomInfo))
	})
	return _c
}

func (_c *MockChatNavHandler_RequestRoomInfoHandler_Call) Return(_a0 oscar.XMessage, _a1 error) *MockChatNavHandler_RequestRoomInfoHandler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChatNavHandler_RequestRoomInfoHandler_Call) RunAndReturn(run func(context.Context, oscar.SNAC_0x0D_0x04_ChatNavRequestRoomInfo) (oscar.XMessage, error)) *MockChatNavHandler_RequestRoomInfoHandler_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChatNavHandler creates a new instance of MockChatNavHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChatNavHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChatNavHandler {
	mock := &MockChatNavHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
