// Code generated by mockery v2.35.2. DO NOT EDIT.

package server

import mock "github.com/stretchr/testify/mock"

// MockChatRegistry is an autogenerated mock type for the ChatRegistry type
type MockChatRegistry struct {
	mock.Mock
}

type MockChatRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChatRegistry) EXPECT() *MockChatRegistry_Expecter {
	return &MockChatRegistry_Expecter{mock: &_m.Mock}
}

// MaybeRemoveRoom provides a mock function with given fields: chatID
func (_m *MockChatRegistry) MaybeRemoveRoom(chatID string) {
	_m.Called(chatID)
}

// MockChatRegistry_MaybeRemoveRoom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaybeRemoveRoom'
type MockChatRegistry_MaybeRemoveRoom_Call struct {
	*mock.Call
}

// MaybeRemoveRoom is a helper method to define mock.On call
//   - chatID string
func (_e *MockChatRegistry_Expecter) MaybeRemoveRoom(chatID interface{}) *MockChatRegistry_MaybeRemoveRoom_Call {
	return &MockChatRegistry_MaybeRemoveRoom_Call{Call: _e.mock.On("MaybeRemoveRoom", chatID)}
}

func (_c *MockChatRegistry_MaybeRemoveRoom_Call) Run(run func(chatID string)) *MockChatRegistry_MaybeRemoveRoom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChatRegistry_MaybeRemoveRoom_Call) Return() *MockChatRegistry_MaybeRemoveRoom_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChatRegistry_MaybeRemoveRoom_Call) RunAndReturn(run func(string)) *MockChatRegistry_MaybeRemoveRoom_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: room, chatSessMsgr
func (_m *MockChatRegistry) Register(room ChatRoom, chatSessMsgr ChatSessionManager) {
	_m.Called(room, chatSessMsgr)
}

// MockChatRegistry_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockChatRegistry_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - room ChatRoom
//   - chatSessMsgr ChatSessionManager
func (_e *MockChatRegistry_Expecter) Register(room interface{}, chatSessMsgr interface{}) *MockChatRegistry_Register_Call {
	return &MockChatRegistry_Register_Call{Call: _e.mock.On("Register", room, chatSessMsgr)}
}

func (_c *MockChatRegistry_Register_Call) Run(run func(room ChatRoom, chatSessMsgr ChatSessionManager)) *MockChatRegistry_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ChatRoom), args[1].(ChatSessionManager))
	})
	return _c
}

func (_c *MockChatRegistry_Register_Call) Return() *MockChatRegistry_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockChatRegistry_Register_Call) RunAndReturn(run func(ChatRoom, ChatSessionManager)) *MockChatRegistry_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Retrieve provides a mock function with given fields: chatID
func (_m *MockChatRegistry) Retrieve(chatID string) (ChatRoom, ChatSessionManager, error) {
	ret := _m.Called(chatID)

	var r0 ChatRoom
	var r1 ChatSessionManager
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (ChatRoom, ChatSessionManager, error)); ok {
		return rf(chatID)
	}
	if rf, ok := ret.Get(0).(func(string) ChatRoom); ok {
		r0 = rf(chatID)
	} else {
		r0 = ret.Get(0).(ChatRoom)
	}

	if rf, ok := ret.Get(1).(func(string) ChatSessionManager); ok {
		r1 = rf(chatID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(ChatSessionManager)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(chatID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockChatRegistry_Retrieve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retrieve'
type MockChatRegistry_Retrieve_Call struct {
	*mock.Call
}

// Retrieve is a helper method to define mock.On call
//   - chatID string
func (_e *MockChatRegistry_Expecter) Retrieve(chatID interface{}) *MockChatRegistry_Retrieve_Call {
	return &MockChatRegistry_Retrieve_Call{Call: _e.mock.On("Retrieve", chatID)}
}

func (_c *MockChatRegistry_Retrieve_Call) Run(run func(chatID string)) *MockChatRegistry_Retrieve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChatRegistry_Retrieve_Call) Return(_a0 ChatRoom, _a1 ChatSessionManager, _a2 error) *MockChatRegistry_Retrieve_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockChatRegistry_Retrieve_Call) RunAndReturn(run func(string) (ChatRoom, ChatSessionManager, error)) *MockChatRegistry_Retrieve_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChatRegistry creates a new instance of MockChatRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChatRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChatRegistry {
	mock := &MockChatRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
